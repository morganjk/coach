####### Machine-readable ontology based on ORION GRADE v1.0

##### TODO / Open questions:

# - Should we use term Asset or Alternative? I prefer Alternative on the top level, since it is more general,
#    and that is how it is currently encoded in this ontology. However, Asset is provided as a subclass of Alternative.
# - Should we use term Environment or Context? Currently, Context is used.
# - Are multiple choices allowed for the different value categories (the SGRx)? Yes, and that is probably not an
#   issue in RDF since you can have multiple links of the same name from a node, but could be problematic in Neo4j.
#   The alternatives are either to store the attribute values in an array, or make a node and relation for each value.
#   Since the values are finite, there will be a finite set of nodes which are reused between cases, so maybe the latter 
#   is preferable. 
# - SGR9, SGR15, SGR16, SGR17, SGR20, ESGR9, ESGR10, RP12, RP19, AT1-6, AT8 lack descriptions.
# - RP16 should be renamed from "Process/Business Analyst" to "Process analyst", or split into two roles.
# - How to handle "other" values in selection lists? Predefined categories can be instance nodes, but other values
#   must be a special class, since different instances must be able to hold a description of what the "other" is
#   in each case. So a specific class "Other", and then we need for each concrete instance say that it is
#   both "Other" and the category to which it belongs (e.g. CustomerValue).
# - The subcategory "Roles" of "Role" in GRADE should be renamed to something more specific. Suggestion: "Role title".
# - The User class needs to be elaborated. Should it build on FOAF? What fields are relevant?
# - RP20-RP22 are identical to RT1-RT3. Only RT1-RT3 are currently included in this ontology.
# - Add suitable restrictions on relations (such as one-to-one, one-to-many, etc.)
# - Asset origin options/suboption should be refined. They overlap now. In particular regarding "open source", but also
#   for some other data.
# - Why is AO4 mentioning "government contract" in the definition field?
# - The properties part of Asset seems to be placed in a rather strange place. Shouldn't it be in Goals, or perhaps Decisions?
# - The top level of GRADE is quite generic. Maybe there should be a subclass for each of the top elements, that are used
#   for the specific decision problem of selecting software components? This is how Alternative vs. Asset are handled now,
#   but the same principle could be applied for the other categories as well.
# - The elements SGR15 and SGR16 appear as both "customer value" and "internal business value". This does not make much sense.
#   It should be only "customer value".
# - The different classes defined should have :title and :description fields.
# - The class User should probably be called Person, and be a subclass of foaf:Person.
# - Use FunctionalProperty to indicate properties that can only have one value for a certain subject.


##### Missing parts:
# - Asset properties, needs to clarified how properties should be handled in general, and how to align with the property model work.
# - Decision, not started yet.
# - Environment/Context. Started with the organization subcategory. Current idea is to use the Context model, since it is more mature,
#   and skip the Environment part of GRADE.


##### Namespaces

# The default namespace prefix : is used for elements of the ORION ontology

@prefix : <http://www.orion-research.se/ontology#> .


# Standard namespace prefixes

@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .


##### Alternative and Asset elements

# An Alternative is specialized by Asset, which is the kind of alternatives considered in the ORION project.
# An Asset links to asset usage; origin options and suboptions; and element types. 
# In GRADE, there is also a link to properties, which is currently not represented in this ontology.

:Alternative 
	rdfs:subClassOf :Class .

:Asset
	rdfs:subClassOf :Alternative .
	

### Properties and estimation methods
# Propperties can be: Prop 1, Prop 2, Prop 3
# Estimation methods can be: E0, E1, E2, E3, E4, E5, E6

# Properties

:property
    a owl:ObjectProperty ;
    rdfs:domain :Asset ;
    rdfs:range :Property .
    
:Property
    rdfs:subClassOf :Class .

:developmentEffort
    :gradeId "AP1" ;
    a :Property ;
    :title "Development effort" ;
    :description "Cost of a project" ;
    :type "float" .

:kloc
    :gradeId "AP2" ;
    a :Property ;
    :title "KLOC" ;
    :description "number of lines of code (in thousands) in a project" ;
    :type "float" .
    
:cost
    :gradeId "AP3" ;
    a :Property ;
    :title "Cost" ;
    :description "" ;
    :type "float" .
    
:worstCaseExecutionTime
    :gradeId "AP4" ;
    a :Property ;
    :title "Worst case execution time" ;
    :description "" ;
    :type "integer" .


# Estimation methods

:estimationMethod
    a owl:ObjectProperty ;
    rdfs:domain :Asset ;
    rdfs:range :EstimationMethod .

:EstimationMethod
    rdfs:subClassOf :Class .

# Expert estimate are specials estimation methods, which will be a default to all properties.
# Consequently, they do not have a field "belongTo".
:expertEstimateText
    :gradeId "AEM1" ;
    a :EstimationMethod ;
    :title "Expert estimate text" ;
    :microserviceName "ExpertEstimateText" ;
    :description "An expert does an estimation of a property" ;
    :hasParameter :expertEstimateTextEstimation ;
    :type "text" .

:expertEstimateFloat
    :gradeId "AEM2" ;
    a :EstimationMethod ;
    :title "Expert estimate float" ;
    :microserviceName "ExpertEstimateFloat" ;
    :description "An expert does an estimation of a property" ;
    :hasParameter :expertEstimateFloatEstimation ;
    :type "float" .
    
:expertEstimateInteger
    :gradeId "AEM3" ;
    a :EstimationMethod ;
    :title "Expert estimate integer" ;
    :microserviceName "ExpertEstimateInteger" ;
    :description "An expert does an estimation of a property" ;
    :hasParameter :expertEstimateIntegerEstimation ;
    :type "integer" .

:basicCocomo
    :gradeId "AEM4" ;
    a :EstimationMethod ;
    :title "Basic COCOMO" ;
    :microserviceName "BasicCOCOMO" ;
    :description "" ;
    :belongTo :developmentEffort ;
    :hasParameter :cocomoDevelopmentMode ;
    :useProperty :kloc ;
    :type "float" .

:intermediateCocomo
    :gradeId "AEM5" ;
    a :EstimationMethod ;
    :title "Intermediate COCOMO" ;
    :microserviceName "IntermediateCOCOMO" ;
    :description "" ;
    :belongTo :developmentEffort ;
    :hasParameter :cocomoDevelopmentMode ,
        :intermediateCocomoRELY ,
        :intermediateCocomoDATA ,
        :intermediateCocomoCPLX ,
        :intermediateCocomoTIME ,
        :intermediateCocomoSTOR ,
        :intermediateCocomoVIRT ,
        :intermediateCocomoTURN ,
        :intermediateCocomoACAP ,
        :intermediateCocomoAEXP ,
        :intermediateCocomoPCAP ,
        :intermediateCocomoVEXP ,
        :intermediateCocomoLEXP ,
        :intermediateCocomoMODP ,
        :intermediateCocomoTOOL ,
        :intermediateCocomoSCED ;
    :useProperty :kloc ;
    :type "float" .
    
:costEstimation
    :gradeId "AEM8" ;
    a :EstimationMethod ;
    :title "Cost estimation" ;
    :microserviceName "CostEstimation" ;
    :description "" ;
    :belongTo :cost ;
    :hasParameter :costEstimationSalary ;
    :useProperty :developmentEffort ;
    :type "float" .
    
# Estimation method's parameters
# Each parameter's uri is: <estimation method name><parameter name>.
# Each parameter must have the predicates
#   - ":name" The name of the parameter.
#   - ":type" The type of the parameter. Its value must be one among "integer", "text", "float", or "select". If the type is select, it should have the predicate ":possibleValues".
#   - ":defaultValue" The default value of the parameter. If the type if "select", it should be a value from ":possibleValues" (see below). If the type is "integer" or "float", it must be a valid value. Moreover, if the predicate ":min" and/or ":max" are defined, it must be in the valid range of values.
#   - "a" with the object ":Parameter".

# Moreover, there are several optional predicates
#   - ":min" The minimum value that the user can input. It will be used only if the type is "integer" or "float".
#   - ":max" The maximum value that the user can input. It will be used only if the type is "integer" or "float".
#   - ":possibleValues" The ordered list of all possible values for the selection. Types can be mixed inside the list.
#   - ":category" The category of the parameter. A category has two attributes ":name" and ":rank". The rank will be used to sort parameters (see below).
#   - ":rank" The rank of the parameter inside the category. It will be used to sort parameters (see below).

#Sorting: The parameters are sorting first according to their category's rank, if any. If they have no category, they will be placed on top. Then, the parameters are sorting according to their rank. Finally, the parameters are sorting according to their name. 

:parameter
    a owl:ObjectProperty ;
    rdfs:domain :Asset ;
    rdfs:range :Parameter .

:Parameter
    rdfs:subClassOf :Class .

:expertEstimateTextEstimation
    a :Parameter ;
    :name "estimation" ;
    :type "text" ;
    :defaultValue "" .

:expertEstimateFloatEstimation
    a :Parameter ;
    :name "estimation" ;
    :type "float" ;
    :defaultValue "0" .
    
:expertEstimateIntegerEstimation
    a :Parameter ;
    :name "estimation" ;
    :type "integer" ;
    :defaultValue "0" .

:cocomoDevelopmentMode
    a :Parameter ;
    :name "developmentMode" ;
    :type "select" ;
    :possibleValues ("Organic" "Semi-detached" "Embedded") ;
    :defaultValue "Organic" .
    
:intermediateCocomoRELY
    a :Parameter ;
    :name "RELY" ;
    :type "select" ;
    :possibleValues ("Very low" "Low" "Nominal" "High" "Very high") ;
    :defaultValue "Nominal" ;
    :category :intermediateCocomoProduct ;
    :rank 1 .
    
:intermediateCocomoDATA
    a :Parameter ;
    :name "DATA" ;
    :type "select" ;
    :possibleValues ("Low" "Nominal" "High" "Very high") ;
    :defaultValue "Nominal" ;
    :category :intermediateCocomoProduct ;
    :rank 2 .
    
:intermediateCocomoCPLX
    a :Parameter ;
    :name "CPLX" ;
    :type "select" ;
    :possibleValues ("Very low" "Low" "Nominal" "High" "Very high" "Extra high") ;
    :defaultValue "Nominal" ;
    :category :intermediateCocomoProduct ;
    :rank 3 .
    
:intermediateCocomoTIME
    a :Parameter ;
    :name "TIME" ;
    :type "select" ;
    :possibleValues ("Nominal" "High" "Very high" "Extra high") ;
    :defaultValue "Nominal" ;
    :category :intermediateCocomoComputer ;
    :rank 1 .
    
:intermediateCocomoSTOR
    a :Parameter ;
    :name "STOR" ;
    :type "select" ;
    :possibleValues ("Nominal" "High" "Very high" "Extra high") ;
    :defaultValue "Nominal" ;
    :category :intermediateCocomoComputer ;
    :rank 2 .
    
:intermediateCocomoVIRT
    a :Parameter ;
    :name "VIRT" ;
    :type "select" ;
    :possibleValues ("Low" "Nominal" "High" "Very high") ;
    :defaultValue "Nominal" ;
    :category :intermediateCocomoComputer ;
    :rank 3 .
    
:intermediateCocomoTURN
    a :Parameter ;
    :name "TURN" ;
    :type "select" ;
    :possibleValues ("Low" "Nominal" "High" "Very high") ;
    :defaultValue "Nominal" ;
    :category :intermediateCocomoComputer ;
    :rank 4 .
    
:intermediateCocomoACAP
    a :Parameter ;
    :name "ACAP" ;
    :type "select" ;
    :possibleValues ("Very low" "Low" "Nominal" "High" "Very high") ;
    :defaultValue "Nominal" ;
    :category :intermediateCocomoPersonnel ;
    :rank 1 .
    
:intermediateCocomoAEXP
    a :Parameter ;
    :name "AEXP" ;
    :type "select" ;
    :possibleValues ("Very low" "Low" "Nominal" "High" "Very high") ;
    :defaultValue "Nominal" ;
    :category :intermediateCocomoPersonnel ;
    :rank 2 .
    
:intermediateCocomoPCAP
    a :Parameter ;
    :name "PCAP" ;
    :type "select" ;
    :possibleValues ("Very low" "Low" "Nominal" "High" "Very high") ;
    :defaultValue "Nominal" ;
    :category :intermediateCocomoPersonnel ;
    :rank 3 .
    
:intermediateCocomoVEXP
    a :Parameter ;
    :name "VEXP" ;
    :type "select" ;
    :possibleValues ("Very low" "Low" "Nominal" "High") ;
    :defaultValue "Nominal" ;
    :category :intermediateCocomoPersonnel ;
    :rank 4 .
    
:intermediateCocomoLEXP
    a :Parameter ;
    :name "LEXP" ;
    :type "select" ;
    :possibleValues ("Very low" "Low" "Nominal" "High") ;
    :defaultValue "Nominal" ;
    :category :intermediateCocomoPersonnel ;
    :rank 5 .
    
:intermediateCocomoMODP
    a :Parameter ;
    :name "MODP" ;
    :type "select" ;
    :possibleValues ("Very low" "Low" "Nominal" "High" "Very high") ;
    :defaultValue "Nominal" ;
    :category :intermediateCocomoProject ;
    :rank 1 .
    
:intermediateCocomoTOOL
    a :Parameter ;
    :name "TOOL" ;
    :type "select" ;
    :possibleValues ("Very low" "Low" "Nominal" "High" "Very high") ;
    :defaultValue "Nominal" ;
    :category :intermediateCocomoProject ;
    :rank 2 .
    
:intermediateCocomoSCED
    a :Parameter ;
    :name "SCED" ;
    :type "select" ;
    :possibleValues ("Very low" "Low" "Nominal" "High" "Very high") ;
    :defaultValue "Nominal" ;
    :category :intermediateCocomoProject ;
    :rank 3 .
    
:costEstimationSalary
    a :Parameter ;
    :name "Salary" ;
    :type "float" ;
    :min "0" ;
    :defaultValue "0" .

# Parameter's category
# Each parameter can have up to one category, which has a name and a rank. Then, the parameters will be group by category, 
# and each category will be ordered by category rank

:intermediateCocomoProduct
    :name "Product" ;
    :rank 1 .

:intermediateCocomoComputer
    :name "Computer" ;
    :rank 2 .
    
:intermediateCocomoPersonnel
    :name "Personnel" ;
    :rank 3 .

:intermediateCocomoProject
    :name "Project" ;
    :rank 4 .
    

